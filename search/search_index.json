{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This documentation will guide you through how to host a website through the use of Node.js and Express.js. Our goal is to provide a framework that is reusable and can be modified in the future for different websites. Our documentation will guide you through the basics.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is designed for users who are familiar with vsCode, GitHub, and the use of the inspect option in their preferred internet browser, and need to set up their own website.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>This documentation is designed to be used with the following assumptions:</p> <ul> <li>Users have the latest version of vsCode installed.</li> <li>Users are using a Windows Operating System.</li> <li>Users already have a new vsCode project open</li> <li>Users have already connected their vsCode to GitHub</li> <li>Users already have npm downloaded</li> </ul>"},{"location":"#task-overview","title":"Task Overview","text":"<p>Here are the following tasks that our guide will help walk you through:</p> <ul> <li>Getting Started with Express JS</li> <li>Connecting to GitHub and Installing Nodemon</li> <li>Using Get/Send/Listen</li> <li>Connecting a website using Express</li> </ul>"},{"location":"#conventions","title":"Conventions","text":"<ul> <li>Images will be annotated with red boxes to highlight key information</li> <li>All steps will be numbered sequentially</li> <li>Images with blocks of code will have an option, in the top right corner of the image, to copy the code in that image which provides a shortcut to copy and paste as shown below:</li> </ul> <pre><code>This text can be copied with the icon in the top right corner.\n</code></pre>"},{"location":"#messages-and-notes","title":"Messages and Notes","text":"<p>Warning</p> <p>Messages that can lead to potential errors will be specified with this tag.</p> <p>Info</p> <p>Messages that contain helpful information will be specified with this tag.</p> <p>Success</p> <p>Messages that lead to a sucessful completion of a task will be specified with this tag.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#javascript-js","title":"JavaScript (JS)","text":"<p>A language used to make websites interactive, like adding buttons that do something when clicked.  </p>"},{"location":"glossary/#nodejs","title":"Node.js","text":"<p>A program that allows JavaScript to run on a computer, not just inside a website.  </p>"},{"location":"glossary/#expressjs","title":"ExpressJS","text":"<p>A tool that helps build websites and apps using Node.js, making it easier to manage how they work.  </p>"},{"location":"glossary/#terminal","title":"Terminal","text":"<p>A screen where you type commands to control your computer. It\u2019s available in most coding programs (IDEs).  </p>"},{"location":"glossary/#github","title":"GitHub","text":"<p>A website where people store and share code, making it easy to work on projects with others.  </p>"},{"location":"glossary/#nodemon","title":"Nodemon","text":"<p>A tool that watches your project and restarts it if something goes wrong, so you don\u2019t have to do it manually.  </p>"},{"location":"glossary/#npm","title":"npm","text":"<p>A tool that helps you easily install and manage extra features for your Node.js project.  </p>"},{"location":"glossary/#boilerplate","title":"Boilerplate","text":"<p>A starter set of code that helps you begin a new project without writing everything from scratch.  </p>"},{"location":"glossary/#localhost","title":"Localhost","text":"<p>A special web address that points to your own computer, often used for testing projects before they go online.  </p>"},{"location":"glossary/#get","title":"GET","text":"<p>A way for a website or app to ask a server for information, like loading a webpage or fetching data.  </p>"},{"location":"glossary/#listen","title":"Listen","text":"<p>A command that tells a server to wait and be ready for people to connect to it.  </p>"},{"location":"glossary/#send","title":"Send","text":"<p>A command that delivers information from a server to a user, like sending a webpage or a message.  </p>"},{"location":"glossary/#html","title":"HTML","text":"<p>The basic building blocks of a webpage, used to create and organize content.  </p>"},{"location":"glossary/#extension","title":"Extension","text":"<p>An extra feature you can add to a program or browser to give it more abilities.  </p>"},{"location":"glossary/#json","title":"JSON","text":"<p>A simple way to store and share information, often used to send data between websites and apps.  </p>"},{"location":"task1/","title":"Getting Started with Express JS","text":"<p>In this section, we will go over the steps to installing and creating our first file.</p>"},{"location":"task1/#creating-our-file","title":"Creating our file","text":"<p>1 Hover over the new file button and select a new file</p> <p></p> <p>2 Name the file to whatever name you prefer, make sure to include .js at the end </p>"},{"location":"task1/#getting-started-with-express-js_1","title":"Getting Started with Express JS","text":"<p>Next we will install Express from the terminal</p> <p>3 Navigate to the terminal window by going to VIEW --&gt; TERMINAL</p> <p>Info</p> <p>This can also be done with the shortcut: _(CTRL + SHIFT + `)</p> <p>4 Once the terminal has opened, click into it and type the following into the terminal: npm install express</p> <pre><code>npm install express\n</code></pre>"},{"location":"task1/#copy-over-the-boilerplate-code","title":"Copy over the boilerplate code","text":"<p>5 Locate back to your new file, and then paste the boilerplate code that can be copied below</p> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello World!')\n})\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}`)\n})\n</code></pre> <p>Info</p> <p>This code can also be found on the Express JS Setting Started website</p>"},{"location":"task1/#getting-started-with-npm","title":"Getting started with npm","text":"<p>6 Navigate back to the terminal window if it's no longer open by going to VIEW --&gt; TERMINAL</p> <p>Info</p> <p>This can also be done with the shortcut: (CTRL + SHIFT + `)</p> <p>7 Once the terminal has opened, click into it and type the following: npm init </p> <pre><code>npm init\n</code></pre> <p>Info</p> <p>After we have typed npm init, we will be asked to enter details about our file</p> <p>8 Leave all default parameters by continuously press ENTER until all done</p> <p>9 Type the following into the terminal: <pre><code>npm install express\n</code></pre></p> <p>10 Once packages have been installed, verify that the messages inside package.json match the image below </p>"},{"location":"task1/#checking-our-steps","title":"Checking our steps","text":"<p>11* Navigate to the newly created package.json that npm has created for us 12** To verify we did the last steps correctly, type the following into the terminal: node .\\filename</p> <pre><code>node .\\filename\n</code></pre> <p></p>"},{"location":"task2/","title":"Connecting to GitHub and Installing Nodemon","text":"<p>The following steps will explain how to connect our newly created file to your GitHub, as well as install nodemon. Nodemon will allow us to view our file and have it auto update, which will alleviate unnecessary repitition.</p>"},{"location":"task2/#github","title":"GitHub","text":"<p>1 Intiliaze GitHub in vsCode by typing the following one line at a time:</p> <pre><code>git intit -b main\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m\n</code></pre> <p>2 Let's quickly check our file by typing the following in the terminal and changing it to match the file's name:</p> <pre><code>node .\\server.js\n</code></pre>"},{"location":"task2/#installing-nodemon","title":"Installing Nodemon","text":"<p>3 Nagivate to the terminal as we did in our last step (VIEW --&gt; TERMINAL) and type the following: npm install -g nodemon</p> <pre><code>npm install -g nodemon\n</code></pre> <p></p> <p>4 We will start Nodemon by typing the following in the terminal: nodemon .\\filename.js</p> <pre><code>nodemon .\\filename.js\n</code></pre> <p></p>"},{"location":"task2/#testing-our-file-with-nodemon","title":"Testing our file with Nodemon","text":"<p>5 Open up a browser and type the following: localhost:3000/</p> <pre><code>localhost:3000/\n</code></pre> <p>Success</p> <p>Your page should look like this: </p> <p>6 Return back to your VSCode file bolierplate and locate app.get and replace our app.get boilerplate from earlier to your own custom message</p> <pre><code>app.get('/', (req, res) =&gt; {\n  res.send('Hello World!')\n})\n</code></pre> <p>7 Change the port number from 3000 to another number from 1-64536, for this example we used 1234 </p>"},{"location":"task3/","title":"Using Get\\Send\\Listen","text":"<p>In the next steps, we will go over how to start using get, send and listen in Express JS.</p>"},{"location":"task3/#use-the-get-request-boilerplate","title":"Use the Get Request Boilerplate","text":"<p>1 We will paste this new boilerplate code into our VSCode, replacing the preivous code</p> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\nres.send('Hello World!')\n})\n\napp.listen(port, () =&gt; {\nconsole.log(`Example app listening on port ${port}`)\n})\n</code></pre> <p>Info</p> <p>The boilerplate code can also be found at this website</p>"},{"location":"task3/#getting-started-with-ressend","title":"Getting started with res.send","text":"<p>2 Type the following in the terminal: node .\\server.js, and refresh the page to verify that the server is running</p> <pre><code>node .\\server.js\n</code></pre> <p>Info</p> <p>In the same terminal, the program can be stopped by typing the following: CTRL + UPPERCASE C_</p> <p>Warning</p> <p>If the program is stopped using CTRL + UPPERCASE C is used, nodemon must be restarted again before continuing again using the following code: <pre><code>nodemon .\\filename.js\n</code></pre></p> <p>3 We are then changing our app.get to the following, replace the previous app.get with this code</p> <pre><code>app.get(\"/\", (req, res) =&gt; {\n    res.send(\"&lt;h1&gt; Welcome to my first site!&lt;/h1&gt;\")\n})\n</code></pre>"},{"location":"task3/#testing-our-applisten","title":"Testing our app.listen","text":"<p>We will now test our app.listen message to view what we just created with res.send</p> <p>4 Open up a browser of your choice and type: localhost:3000</p> <pre><code>localhost:3000\n</code></pre> <p>5 We will now check our generic message in the browser</p> <p>Success</p> <p>Your page should look like this:  </p>"},{"location":"task3/#using-ressend-for-a-new-page","title":"Using res.send for a new page","text":"<p>6 We will now go back to vsCode to send a message to a new page. Copy the following code to replace our old app.get:</p> <pre><code>app.get(\"/page1\", (req, res) =&gt; {\n    res.send(\"&lt;h1&gt; Welcome to page1!&lt;/h1&gt;\")\n})\n</code></pre> <p>7 Let's test this page by returning back to our browser to see our new changes</p> <p>Info</p> <p>If the page was accidentallly closed, we can find it again by typing: <pre><code>localhost:3000/\n</code></pre></p> <p>Success</p> <p>Your page should look like this:  </p>"},{"location":"task4/","title":"Connecting a Website using Express","text":"<p>In these steps, we will finally connect our web page using express.</p>"},{"location":"task4/#creating-a-template-html-page","title":"Creating a template HTML page","text":"<p>1 Create a new html file and name the file: index.html within the folder </p> <p></p> <p>2 Once the file is created, click into it</p> <p>Info</p> <p>At the top of the page, we will be utilizing a shortcut to make a boilerplate html page</p> <p>3 Copy the following text and paste it into your new file</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>4 Add a message between the body tags as can be seen below</p> <p></p>"},{"location":"task4/#connecting-our-website-through-express","title":"Connecting our website through express","text":"<p>5 Return to our other file where the .send is</p> <ul> <li>Copy the destination path to the html page we just created</li> <li>Update our app.get</li> </ul> <pre><code>  app.get(\"/\", (req, res) =&gt; {\n    res.sendFile(path.join(__dirname, \"index.html\"));\n})\n</code></pre> <p>6 Let's verify that our html page is working by checking our localhost:3000!</p> <p>Success</p> <p>Your page should look like this:  </p>"},{"location":"task4/#testing-our-new-website-with-appget","title":"Testing our new website with app.get","text":"<p>Info</p> <p>With our new get request, we can now test our new website!</p> <p>7 Let's add a messgae to our json object</p> <p><code>app.get(\"/\", (req, res) =&gt; {     res.json({         \"msg\" : \"all good\",         \"status\" : \"success\"     }) })</code></p> <p>8 Navigate to localhost:3000 and you should see the new addition</p> <p>Success</p> <p>Your page should look like this:  </p>"},{"location":"troubleShootingGuide/","title":"troubleShootingGuide","text":"Problems Probable Causes Solution Unable to locate file path Your project file location is lost changed Within your terminal, enter the pwd command to locate your file path Unable to load local host Input error in either browser or terminal Within your server.js validate the local host value as well as in your browser Express.JS is not listening to a port number Ensure you have correctly copied all code from Step 5 of Getting Started with Express JS Unable to type in terminal Nodemon is continiously running P newress CTRL + UPPERCASE 'C' to stop node or nodemon from running"}]}